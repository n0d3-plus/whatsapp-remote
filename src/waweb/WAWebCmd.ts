// Type definitions for WAWebCmd (Cmd/CmdImpl)
// Types and signatures are inferred from the implementation; refine as needed.

import type { EventEmitter } from "events";

export interface IWAWebCmd extends EventEmitter {
    // State properties
    isMainLoaded: boolean;
    uiBusy: number;
    isMainStreamReadyMd: boolean;
    isOfflineDeliveryEnd: boolean;

    // Core event triggers
    abPropsLoaded(): void;
    alertCall(a: any, b: any, c: any, d: any, e: any): void;
    alertNewMsg(a: any): void;
    archiveChat(a: any, b: any, c?: boolean): void;
    archiveChatFromEntryPoint(a: any, b: any, c: any, e?: boolean): void;
    assignChat(a: any, b: any): void;
    attachMediaDrawer(a: any): void;
    attachProduct(a: any): void;
    blockCurrentChat(): void;
    botTogglePluginSearchDetailsToggle(a: any, b: any): void;
    cancelCall(a: any): void;
    chatInfoDrawer(a: any, b: any): void;
    chatListVisibilityChange(a: any): void;
    chatSearch(a: any): void;
    clearChat(a: any, b: any): void;
    clearCurrentChatConversationHistory(): void;
    closeActiveChat(): void;
    closeChat(a: any): void;
    closeCommandPalette(): void;
    closeContextMenu(a: any): void;
    closeExpressionPanels(): void;
    closeLongLinkModal(a?: boolean): void;
    closeStatusViewer(): void;
    closeTooltip(a: any): void;
    communityAddNewGroup(a: any, b: any, c: any): void;
    correctPasscodeLockScreen(a: any): void;
    criticalSyncDone(): void;
    ctwaAdPreviewDrawer(a: any, b: any, c: any): void;
    deleteOrExitChat(a: any, b: any): void;
    deleteOrExitChatFromEntryPoint(a: any, b: any, c: any): void;
    deleteSelectedMessage(): void;
    editGroupDescription(): void;
    editGroupSubject(): void;
    editNewsletterDescription(): void;
    endFlow(): void;
    ephemeralDrawer(a: any, b: any, c: any): void;
    exitCurrentGroup(): void;
    favoriteChat(a: any, b: any, c: any): void;
    flashFocusedMsg(a: any): void;
    floaterEscapeOverlap(a: any, b: any): void;
    focusChatSearch(): void;
    focusNextChat(a: any): void;
    focusPrevChat(a: any): void;
    forwardCurrentMessage(): void;
    getConversationHeaderOffset(a: any): void;
    groupNotificationContextCardRendered(a: any): void;
    handleOfflineProgressUpdate(): void;
    incorrectPasscodeLockScreen(): void;
    initialLoadReady(): void;
    limitSharingDrawer(a: any): void;
    logout(): void;
    logSocketSummary(): void;
    mainLoaded(): void;
    markChatUnread(a: any, b: any): void;
    mediaViewerModal(a: any): void;
    merchantDetailsDrawer(a: any): void;
    midnight(): void;
    msgInfoDrawer(a: any): void;
    muteAllReactions(a: any, b: any, c: any): void;
    muteChat(a: any, b: any, c: any, e: any): void;
    muteChatFromEntryPoint(a: any, b: any, c: any, e: any): void;
    muteChatMultiselect(a: any, b: any, c: any): void;
    newMediaMsg(a: any): void;
    offlineDeliveryEnd(): void;
    onAbPropsUpdate(a: any): void;
    onAccountSyncForPrivacy(a: any): void;
    onBrigadingStateChange(a: any): void;
    onFullChatHistorySynced(): void;
    onHistorySyncChunkProcessed(a: any): void;
    onInitialChatHistorySynced(): void;
    onNotificationPermissionChange(): void;
    onPanesDidChange(a: any): void;
    onPanesWillChange(a: any): void;
    onRecentChatHistorySynced(): void;
    onStartingLogout(): void;
    onStatusPostingFlow(): void;
    onStatusViewerOpen(): void;
    onTemporaryBan(a: any): void;
    openAttachmentDropdown(): void;
    openChatAt(a: any): Promise<boolean>;
    openChatBottom(a: any, b: any): Promise<boolean>;
    openChatFromUnread(a: any, e: any): Promise<boolean>;
    openCommandPalette(): void;
    openCommunityHome(a: any, b: any): void;
    openCommunityHomeManageGroups(a: any): void;
    openCommunityPendingGroupsDrawer(a: any): void;
    openCommunitySettingsDrawer(a: any): void;
    openCommunitySubgroupJoinModal(a: any, b: any): void;
    openCommunityTabbedInfo(a: any, b: any, c: any, d: any): void;
    openComposeBoxExpressionPanel(a: any): void;
    openContextMenu(a: any, b: any): void;
    openCreatedNewsletter(a: any): void;
    openCurrentChatInfo(): void;
    openEventInfoDrawer(a: any, b: any, c: any, d: any): void;
    openGroupsV4InviteRequestFlow(a: any, b: any, c: any, d: any): void;
    openLockScreenModal(): void;
    openLongLinkModal(): void;
    openMediaViewerForAlbumMedia(a: any): void;
    openNewsletterProfile(a: any, b: any): void;
    openProfile(a: any): void;
    openSocketStream(): void;
    openStickerPack(a: any): void;
    openTooltip(a: any, b: any): void;
    pausePttRecording(): void;
    pinChat(a: any, b: any): void;
    playNextPtv(a: any): void;
    productImageViewerModal(a: any, b: any): void;
    reachoutTimelockStateChange(): void;
    reactionChangeLastMessage(): void;
    readyForMainStreamMode(): void;
    readyForProcessOffline(): void;
    reconnectSocket(): void;
    refreshMessages(): void;
    refreshQR(): void;
    replyCurrentMessage(): void;
    replyCurrentMessagePrivate(): void;
    rerenderApp(): void;
    resetOfflineDeliveryState(): void;
    scrollChatHeight(a: any): void;
    scrollChatListToTop(): void;
    scrollChatToBottom(): Promise<void>;
    scrollMessages(): void;
    scrollToActiveChat(): void;
    sendDeleteMsgs(a: any, b: any, c: any, e: any, f: any, g: any): void;
    sendPttRecording(): void;
    sendRevokeMsgs(a: any, b: any, c: any): void;
    sendStarMsgs(a: any, b: any, c: any, e: any): void;
    sendUnstarMsgs(a: any, b: any, c: any, e: any): void;
    serverUpdatedClientExpiration(): void;
    setActiveFilter(a: any, b: any, c: any): void;
    setActiveNavBarItem(a: any): void;
    setSocketState(a: any): void;
    setUiBusy(a: boolean): void;
    showCountrySelector(a: any, b: any, c: any, d: any, e: any, f: any, g: any): void;
    showMerchantDetailsEntityTypePopup(a: any, b: any): void;
    showServiceUnavailableError(): void;
    socketStreamDisconnected(): void;
    starCurrentMessage(): void;
    startPttRecording(): void;
    storageInitializationError(): void;
    toggleAiRepliesStatus(a: any): void;
    toggleLidDebugBadge(): void;
    toggleStickerMaker(): void;
    triggerBugReportV2(): void;
    triggerStorageAlert(): void;
    updateChatlistSelection(a: any): void;
    updateStatusPrivacySettings(a: any): void;
    verificationDrawer(a: any): void;
    windowClick(a: any): void;
    windowError(a: any): void;
    windowMouseDown(a: any): void;
}

export declare const WAWebCmd: IWAWebCmd;

export declare const APP_STATE_SYNC_COMPLETED: string;