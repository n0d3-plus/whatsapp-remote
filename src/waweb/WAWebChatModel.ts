// Type definitions for the Chat model (WAWebChatModel)
// All types are inferred as `any` unless specified; refine as needed.
// Extends WAWebBaseModel and includes Chat-specific fields and methods.

import type { IBaseModel } from "./WAWebBaseModel";
import type { IWAWebContactModel } from "./WAWebContactModel";
import type { IWAWebMsgCollection } from "./WAWebMsgCollection";
import type { IWAWebWid } from "./WAWebWid";

export interface IWAWebChatModel extends IBaseModel {
    // Props set via WAWebBaseModel.prop/session
    id: IWAWebWid;
    accountLid: any;
    t: any;
    unreadCount: number;
    unreadDividerOffset: number;
    archive: any;
    isReadOnly: any;
    isLocked: any;
    isAnnounceGrpRestrict: any;
    modifyTag: any;
    muteExpiration: number;
    isAutoMuted: boolean;
    wallpaper: any;
    showDoodle: any;
    name: any;
    notSpam: any;
    pin: any;
    changeNumberOldJid: any;
    changeNumberNewJid: any;
    lastReceivedKey: any;
    capiThreadControl: any;
    ephemeralDuration: any;
    ephemeralSettingTimestamp: any;
    disappearingModeInitiator: any;
    disappearingModeTrigger: any;
    disappearingModeInitiatedByMe: any;
    createdLocally: any;
    pendingAction: any;
    formattedTitle: any;
    active: any;
    pausedTimerId: any;
    presenceResendTimerId: any;
    recording: any;
    typing: any;
    colors: any;
    attachMediaContents: any;
    draftAttachMediaContentsSortTs: any;
    isComposingPoll: boolean;
    pttRecordingSession: any;
    squelch: any;
    reactionSquelch: any;
    pendingSeenCount: number;
    markedUnread: any;
    trusted: any;
    groupSafetyChecked: any;
    canSend: any;
    showUnreadInTitle: boolean;
    activeUnreadCount: any;
    isFavorite: boolean;
    promises: any;
    ftsCache: any;
    composeQuotedMsg: any;
    composeQuotedMsgRemoteJid: any;
    quotedMsgAdminGroupJid: any;
    quotedMsgAdminGroupSubject: any;
    quotedMsgAdminParentGroupJid: any;
    groupMetadata: any;
    newsletterMetadata: any;
    presence: any;
    mute: any;
    contact: IWAWebContactModel;
    mediaCount: number;
    linkCount: number;
    docCount: number;
    productCount: number;
    pendingDeleteForMeCount: number;
    isParentGroup: any;
    groupType: any;
    hasCapi: any;
    unreadMentionsOfMe: any;
    unreadMentionCount: any;
    hasUnreadMention: boolean;
    archiveAtMentionViewedInDrawer: boolean;
    hasChatBeenOpened: boolean;
    tcToken: any;
    tcTokenTimestamp: any;
    tcTokenSenderTimestamp: any;
    msgUnsyncedButtonReplyMsgs: any;
    endOfHistoryTransfer: boolean;
    endOfHistoryTransferType: any;
    pendingInitialLoading: boolean;
    lastReactionPreview: any;
    chatlistPreview: any;
    previewT: any;
    unopenedByAssignedAgent: boolean;
    isAssignedToMe: boolean;
    assignedAgent: any;
    unreadEditTimestampMs: any;
    celebrationAnimationLastPlayed: number;
    animationCandidateData: any;
    draftMessage: any;
    draftMessageSortTs: any;
    ephemeralDisplayedExemptions: any;
    hasOpened: any;
    botInitialTypingIndicatorMsgId: any;
    hasCreatedBotInvokeSystemMsg: any;
    bizBotSystemMsgType: any;
    hasRequestedWelcomeMsg: boolean;
    lidOriginType: any;
    hasPreloaded: boolean;
    chatEntryPoint: any;
    forceDismissAiAgentBlockBar: boolean;
    limitSharing: any;

    // Internal/utility fields
    msgs: IWAWebMsgCollection;
    msgChunks: any[];
    mediaMsgs: any;
    linkMsgs: any;
    docMsgs: any;
    productMsgs: any;
    eventMsgs: any;
    starredMsgs: any;
    keptMsgs: any;
    $ChatImpl$p_1: Set<any>;
    $ChatImpl$p_2: Map<any, any>;
    $ChatImpl$p_3: AbortController;
    addQueue: any;
    sendQueue: any;
    saveAssignedColorsDebounced: any;

    // Methods
    initialize(): void;
    set(b: string | object, c?: any, d?: any): this;
    equals(a: any): boolean;
    addPendingAction(a: Promise<any>): void;
    decPending(): void;
    senderMsgCount(): number;
    isCAGAdmin(): boolean;
    hasMaybeSentMsgToChat(): boolean;
    isTrusted(): boolean;
    isGroupSafetyChecked(): boolean;
    isSuspendedOrTerminated(): boolean;
    canBlockFromNotification(): boolean;
    canToggleFavorite(): boolean;
    title(): string;
    getTcToken(): any;
    shouldShowUnreadDivider(): boolean;
    delete(): void;
    isDirty(): boolean;
    canPin(): boolean;
    canArchive(): boolean;
    supportsChatLock(): boolean;
    hasUnreadEdit(): boolean;
    setComposeContents(a: any): void;
    getComposeContents(): any;
    setAttachMediaContents(a: any): void;
    isComposingWithUnsavedChanges(): boolean;
    isBusinessGroup(): boolean;
    isCAG(): boolean;
    preload(): void;
    onEmptyMRM(): void;
    deleteMsgs(a: boolean, b: any): void;
    deleteMsgsBeforeMsgInclusive(a: any, b?: boolean, e?: any): void;
    deleteMsgsPartial(a: (...args: any[]) => boolean, b?: boolean): void;
    deleteMessages(a: string[]): void;
    getLastMsgKeyForAction(): any;
    getWebcChatType(): any;
    getMdChatAssignmentChatType(): any;
    getChatAssignmentChatType(): any;
    deregisterExpiredViewOnceBulkMessages(a: any[]): void;
    isUnreadMsg(a: any): boolean;
    isActiveUnreadMsg(a: any): boolean;
    setCelebrationAnimationLastPlayed(): void;
    setChatWallpaper(a: any): Promise<any>;
    setShowDoodle(a: any): Promise<any>;
    setCapiThreadControl(a: any): Promise<any>;
    setForceDismissAiAgentBlockingBar(a: boolean): void;
    setAnimationCandidateData(a: any): void;
    sortMsgs(a: any[]): any[];
    waitForChatLoading(): Promise<any>;
    unstarAll(): void;
    removeFromCollection(a: any): void;
    getMediaMsgs(): any;
    getLinkMsgs(): any;
    getDocMsgs(): any;
    getEventMsgs(): any;
    getParticipantCount(): number;
    iAmAdmin(): boolean;
    getProductMsgs(): any;
    getStarredMsgs(): any;
    getKeptMsgs(): any;
    hasKeptMsgs(): boolean;
    canSendPolls(): boolean;
    canInvokeBot(): boolean;
    getAbortController(): AbortController;
    getDeleteSignal(): AbortSignal;
    getCollection(): any;
    getGroupMetadataCollection(): any;
    getNewsletterMetadataCollection(): any;
    updateBotInvokeSystemMsgCreated(): Promise<void>;
    updateBizBotSysMsgCreated(a: any): Promise<void>;
    supportsKIC(): boolean;

    // Add more methods as needed from source
}

export type WAWebChatModelConstructor = new (...args: any[]) => IWAWebChatModel;